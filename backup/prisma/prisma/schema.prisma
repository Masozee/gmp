generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  image     String?
  name      String?
  password  String?
  role      UserRole   @default(USER)
  errorLogs ErrorLog[]

  @@map("users")
}

model Profile {
  id                String              @id @default(cuid())
  firstName         String
  lastName          String
  email             String              @unique
  phoneNumber       String?
  organization      String?
  bio               String?
  photoUrl          String?
  category          UserCategory
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PublicationAuthor PublicationAuthor[]

  @@map("profiles")
}

model ErrorLog {
  id        String        @id @default(cuid())
  userId    String?
  path      String
  method    String
  message   String
  stack     String?
  severity  ErrorSeverity @default(ERROR)
  metadata  Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([severity])
  @@index([createdAt])
  @@map("error_logs")
}

model Publication {
  id          String                     @id @default(cuid())
  title       String
  slug        String                     @unique
  description String
  content     String
  coverImage  String?
  coverCredit String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  status      PublicationStatus          @default(DRAFT)
  categories  CategoriesOnPublications[]
  files       PublicationFile[]
  images      Image[]
  authors     PublicationAuthor[]
  tags        TagsOnPublications[]

  @@map("publications")
}

model PublicationFile {
  id            String      @id @default(cuid())
  name          String
  url           String
  size          Int
  type          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publicationId String
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@index([publicationId])
}

model Category {
  id           String                     @id @default(cuid())
  name         String
  slug         String                     @unique
  description  String?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  publications CategoriesOnPublications[]
}

model CategoriesOnPublications {
  publicationId String
  categoryId    String
  assignedAt    DateTime    @default(now())
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@id([publicationId, categoryId])
  @@index([categoryId])
  @@index([publicationId])
}

model PublicationAuthor {
  id            String      @id @default(cuid())
  order         Int
  publicationId String
  profileId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@unique([publicationId, profileId])
  @@unique([publicationId, order])
  @@map("publication_authors")
}

model Tag {
  id           String               @id @default(cuid())
  name         String               @unique
  slug         String               @unique
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  events       TagsOnEvents[]
  publications TagsOnPublications[]

  @@map("tags")
}

model TagsOnPublications {
  publicationId String
  tagId         String
  createdAt     DateTime    @default(now())
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([publicationId, tagId])
  @@map("tags_on_publications")
}

model Image {
  id            String      @id @default(cuid())
  url           String
  alt           String?
  credit        String?
  publicationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@map("images")
}

model EventCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]

  @@map("event_categories")
}

model Event {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  description   String
  content       String
  status        EventStatus    @default(UPCOMING)
  startDate     DateTime
  endDate       DateTime
  location      String?
  venue         String?
  posterImage   String?
  posterCredit  String?
  published     Boolean        @default(false)
  categoryId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  speakers      EventSpeaker[]
  category      EventCategory  @relation(fields: [categoryId], references: [id])
  presentations Presentation[]
  tags          TagsOnEvents[]

  @@index([categoryId])
  @@index([status])
  @@index([startDate])
  @@map("events")
}

model Speaker {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  email         String         @unique
  organization  String?
  position      String?
  bio           String?
  photoUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  events        EventSpeaker[]
  presentations Presentation[]

  @@map("speakers")
}

model EventSpeaker {
  id        String   @id @default(cuid())
  eventId   String
  speakerId String
  order     Int
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker   Speaker  @relation(fields: [speakerId], references: [id], onDelete: Cascade)

  @@unique([eventId, speakerId])
  @@unique([eventId, order])
  @@index([eventId])
  @@index([speakerId])
  @@map("event_speakers")
}

model Presentation {
  id        String    @id @default(cuid())
  title     String
  abstract  String?
  slides    String?
  videoUrl  String?
  duration  Int?
  speakerId String
  eventId   String
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker   Speaker   @relation(fields: [speakerId], references: [id])

  @@index([speakerId])
  @@index([eventId])
  @@map("presentations")
}

model TagsOnEvents {
  eventId   String
  tagId     String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([eventId, tagId])
  @@map("tags_on_events")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  ARCHIVED
}

enum UserCategory {
  AUTHOR
  BOARD
  STAFF
  RESEARCHER
}

enum ErrorSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

// Project Management Models
model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String    @default("planning") // planning, active, completed, on-hold, cancelled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members      ProjectMember[]
  tasks        Task[]
  budgetItems  BudgetItem[]
  expenses     Expense[]
  goals        Goal[]
  reports      ProjectReport[]
  createdBy    String      // User ID
  managedBy    String      // User ID
}

model ProjectMember {
  id         String   @id @default(cuid())
  role       String   // project manager, team member, stakeholder, client
  joinedAt   DateTime @default(now())
  leftAt     DateTime?
  
  // Relations
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId     String   // Reference to the User model
  tasks      Task[]   @relation("AssignedTasks")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  priority    String    @default("medium") // low, medium, high, urgent
  status      String    @default("todo") // todo, in-progress, review, completed
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  
  // Relations
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees   ProjectMember[] @relation("AssignedTasks")
  parentTaskId String?  // For subtasks
  subtasks    Task[]    @relation("Subtasks")
  parentTask  Task?     @relation("Subtasks", fields: [parentTaskId], references: [id], onDelete: SetNull)
}

model BudgetItem {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  category    String   // personnel, equipment, travel, services, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  expenses    Expense[]
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  date        DateTime
  receipt     String?  // URL to receipt document
  status      String   @default("pending") // pending, approved, rejected, reimbursed
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  budgetItemId String?
  budgetItem  BudgetItem? @relation(fields: [budgetItemId], references: [id], onDelete: SetNull)
  submittedBy String    // User ID
  approvedBy  String?   // User ID
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime?
  status      String   @default("active") // active, achieved, cancelled
  progress    Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectReport {
  id          String   @id @default(cuid())
  title       String
  content     String   // JSON or text content
  type        String   // progress, financial, milestone, summary
  period      String?  // weekly, monthly, quarterly, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   String   // User ID
}

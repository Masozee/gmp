// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  ARCHIVED
}

enum UserCategory {
  AUTHOR
  BOARD
  STAFF
  RESEARCHER
}

enum ErrorSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?    @unique
  image      String?
  errorLogs  ErrorLog[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("users")
}

model Profile {
  id            String       @id @default(cuid())
  firstName     String
  lastName      String
  email         String       @unique
  phoneNumber   String?
  organization  String?
  bio          String?
  category      UserCategory
  photoUrl      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  PublicationAuthor PublicationAuthor[]

  @@map("profiles")
}

model ErrorLog {
  id        String        @id @default(cuid())
  userId    String?
  path      String
  method    String
  message   String
  stack     String?
  severity  ErrorSeverity @default(ERROR)
  metadata  Json?
  user      User?         @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([severity])
  @@index([createdAt])
  @@map("error_logs")
}

model Publication {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String
  status      String   @default("DRAFT")
  coverImage  String?
  coverCredit String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authors      PublicationAuthor[]
  tags         TagsOnPublications[]
  categories   CategoriesOnPublications[]
  files        PublicationFile[]
  images       Image[]

  @@map("publications")
}

model PublicationFile {
  id        String   @id @default(cuid())
  name      String
  url       String
  size      Int
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String

  @@index([publicationId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  publications CategoriesOnPublications[]
}

model CategoriesOnPublications {
  publicationId String
  categoryId    String
  assignedAt    DateTime @default(now())

  publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([publicationId, categoryId])
  @@index([categoryId])
  @@index([publicationId])
}

model PublicationAuthor {
  id            String      @id @default(cuid())
  order         Int
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([publicationId, profileId])
  @@unique([publicationId, order])
  @@map("publication_authors")
}

model Tag {
  id           String               @id @default(cuid())
  name         String               @unique
  slug         String               @unique
  publications TagsOnPublications[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("tags")
}

model TagsOnPublications {
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         String
  createdAt     DateTime    @default(now())

  @@id([publicationId, tagId])
  @@map("tags_on_publications")
}

model Image {
  id            String      @id @default(cuid())
  url           String
  alt           String?
  credit        String?
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("images")
}
